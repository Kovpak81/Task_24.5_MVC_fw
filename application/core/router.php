<?php

namespace application\core;

use application\core\View;


// класс роутер у меня не статический! на данном этапе фреймворка, так удобнее

class Router
{
    protected $routes = [];
    protected $params = [];

    public function __construct()
    {
        // присваиваем значение переменной, как весь массив routes.php
        $arr = require 'application/config/routes.php';
        // разбираем масив routes.php по эллементам для получения в дальнейшем адресса подключения страниц. Разбираем многомерный массив на ключ масивва и значение-подмассив
        foreach($arr as $key => $val)
        {
            $this->add($key, $val);
        }
        // проверка готовности регулярки
        // debug($this->routes);
    }

    public function add($route, $params)
    {
        // если раскомитить следующую строку можно увидеть все роуты-ключи (след. коммит значения), которые в дальнейшем будем подключать
        // echo '<p>'.$route.'</p>';
        // print_r($params);

        // записываем переменную для дальнейшего использования в регулярном выражении(регулярка). #искать $route именно в начале строки (но только если исключить его из набора []), конец строки#.
        $route = '#^'.$route.'$#';
        // записываем массив ключа (регулярка) относится к значению подмассива controller, action 
        $this->routes[$route] = $params;
    }

    public function match()
    {
        // присваиваем переменной значение глобальной переменной адрес и с помощью встроенной функции trim() убираем слеш с начала значения, т.к. $_SERVER['REQUEST_URI'] вначале адреса пишет '/'
        $url = trim($_SERVER['REQUEST_URI'], '/');
        // разбираем $this->routes на регулярные выражения ($route) и $url(по сути controller и action из routes.php)
        foreach($this->routes as $route => $params)
        {
            // $matches пока не используется
            // если запрошенный адрес в браузере ($url) есть в массиве регулярных выражений $route (т.е. у нас есть такая страница), то присваиваем $this->params (с начала класса) конкретный массив(в виде например: 'controller' => 'account', 'action' => 'login') из сложного массива
            if(preg_match($route, $url, $matches))
            {
                // присваиваем защищенной переменной, объявленной в начале класса, текущее полученное значение  
               $this->params = $params;
            //    если функция сработала возвращаем true
               return true;
            }
        }
        // если функция не сработала, возвращаем false
        return false;
    }
    public function run()
    {
        // если метод(функция) $this->match() вернула true, то...
        if ($this->match())
        {
            // создаем переменную для подключения контроллера (который нужен для получения конкретного адреса), вначале указываем адрес до директории в которой лежат контроллеры, затем через переменную $this->params['controller'], которая равна 'controller' в routes.php к которому добавляем 'Controller.php' и после чего получаем полное название нужного в данный момент контроллера
            $path = 'application\controllers\\'.$this->params['controller'].'Controller';
            // Проводим проверку на наличие текущего контроллера - объявлен ли класс
            if(class_exists($path))
            {
                $action = $this->params['action'].'Action';
                // проверим существует ли метод(action) в $path - существует ли функция(action) в объявленном классе(значении $path), то есть переменная $path представляет собой класс контроллера (из папки controllers), и в этом классе должна быть функция-метод
                if(method_exists($path, $action))
                {
                    // проверка класса контроллера и метода
                    // debug($path);
                    // debug($action);

                    // в переменную добавляем путь страницы для определения из любого контроллера, через контроллер в ядре фреймворка (core/controller.php)
                    // $this->params попадает в конструктор контролера ядра фреймворка как переменная $route
                    $controller = new $path($this->params);
                    // проверка значения переменной $controller - объект пути и массив route => контроллера и екшена
                    // debug($controller);

                    // это вызов функции в классе контролера из директории controllers, которая уже работает на вывод информации в браузере
                    $controller->$action();
                } 
                else
                {
                    // это использовали, пока не сделали директорию view/errorsв которой создали файлы ошибок 
                    // echo 'Не найден екшен: '.$action;

                    // вызываем статический метод errorCode в классе View и передаем код ошибки, который будет являться переменной $code, которая является названием файла.php
                    View::errorCode(404);

                }
            }
            else
            {
                // это использовали, пока не сделали директорию view/errorsв которой создали файлы ошибок 
                // echo 'Не найден контроллер: '.$path;

                View::errorCode(404);
            }
        } 
        else
        {
            View::errorCode(404);
        }

        
        ;
        // echo 'start';
    }
}